// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/gin-gonic/gin"
	"github.com/nats-io/nats.go"
	"gorm.io/gorm"
	"user-service/api"
	"user-service/api/users"
	user2 "user-service/app/services/user"
	"user-service/app/services/user/repo/user"
	"user-service/config"
	"user-service/db"
)

// Injectors from wire.go:

func Build(cfg config.Config) (*gin.Engine, func(), error) {
	gormDB, err := db.OpenConnection(cfg)
	if err != nil {
		return nil, nil, err
	}
	conn, cleanup, err := provideNATSConnection()
	if err != nil {
		return nil, nil, err
	}
	apiV1 := buildAPI(gormDB, conn)
	engine := initializeApp(apiV1)
	return engine, func() {
		cleanup()
	}, nil
}

func buildAPI(db2 *gorm.DB, natsConn *nats.Conn) *api.ApiV1 {
	repositoryImpl := user.NewRepository(db2)
	serviceImpl := user2.NewService(repositoryImpl, natsConn)
	handlerImpl := users.NewHandler(serviceImpl)
	apiV1 := api.NewApiV1(handlerImpl)
	return apiV1
}

// wire.go:

func provideNATSConnection() (*nats.Conn, func(), error) {
	conn, err := nats.Connect(nats.DefaultURL)
	if err != nil {
		return nil, nil, err
	}

	return conn, func() {
		conn.Close()
	}, nil
}

func initializeApp(api2 *api.ApiV1) *gin.Engine {
	router := gin.Default()
	api2.
		RegisterRoutes(router)
	return router
}
