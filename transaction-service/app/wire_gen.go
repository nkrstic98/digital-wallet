// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"transaction-service/api"
	"transaction-service/api/transactions"
	"transaction-service/app/services/transaction"
	"transaction-service/app/services/user"
	user2 "transaction-service/app/services/user/repo/user"
	"transaction-service/config"
	"transaction-service/db"
)

// Injectors from wire.go:

func Build(cfg config.Config) (*gin.Engine, error) {
	gormDB, err := db.OpenConnection(cfg)
	if err != nil {
		return nil, err
	}
	apiV1 := buildAPI(gormDB)
	serviceImpl := buildUserService(gormDB)
	engine := initializeApp(apiV1, serviceImpl, cfg)
	return engine, nil
}

func buildUserService(db2 *gorm.DB) *user.ServiceImpl {
	repositoryImpl := user2.NewRepository(db2)
	serviceImpl := user.NewService(repositoryImpl)
	return serviceImpl
}

func buildAPI(db2 *gorm.DB) *api.ApiV1 {
	serviceImpl := transaction.NewService(db2)
	handlerImpl := transactions.NewHandler(serviceImpl)
	apiV1 := api.NewApiV1(handlerImpl)
	return apiV1
}

// wire.go:

func initializeApp(api2 *api.ApiV1, userService *user.ServiceImpl, cfg config.Config) *gin.Engine {
	router := gin.Default()
	api2.
		RegisterRoutes(router)

	userService.Init(cfg)

	return router
}
